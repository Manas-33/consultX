// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class AddedClient extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddedClient entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AddedClient must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AddedClient", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AddedClient | null {
    return changetype<AddedClient | null>(
      store.get_in_block("AddedClient", id.toHexString()),
    );
  }

  static load(id: Bytes): AddedClient | null {
    return changetype<AddedClient | null>(
      store.get("AddedClient", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get ClientAddress(): Bytes {
    let value = this.get("ClientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set ClientAddress(value: Bytes) {
    this.set("ClientAddress", Value.fromBytes(value));
  }

  get ClientName(): string {
    let value = this.get("ClientName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ClientName(value: string) {
    this.set("ClientName", Value.fromString(value));
  }

  get ClientEmailId(): string {
    let value = this.get("ClientEmailId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ClientEmailId(value: string) {
    this.set("ClientEmailId", Value.fromString(value));
  }

  get ClientPhoneNumber(): string {
    let value = this.get("ClientPhoneNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ClientPhoneNumber(value: string) {
    this.set("ClientPhoneNumber", Value.fromString(value));
  }

  get IntersestedConsulation(): string {
    let value = this.get("IntersestedConsulation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set IntersestedConsulation(value: string) {
    this.set("IntersestedConsulation", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AddedExpert extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddedExpert entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AddedExpert must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AddedExpert", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AddedExpert | null {
    return changetype<AddedExpert | null>(
      store.get_in_block("AddedExpert", id.toHexString()),
    );
  }

  static load(id: Bytes): AddedExpert | null {
    return changetype<AddedExpert | null>(
      store.get("AddedExpert", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get ExpertAddress(): Bytes {
    let value = this.get("ExpertAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set ExpertAddress(value: Bytes) {
    this.set("ExpertAddress", Value.fromBytes(value));
  }

  get ExpertName(): string {
    let value = this.get("ExpertName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ExpertName(value: string) {
    this.set("ExpertName", Value.fromString(value));
  }

  get EmailId(): string {
    let value = this.get("EmailId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set EmailId(value: string) {
    this.set("EmailId", Value.fromString(value));
  }

  get PhoneNumber(): string {
    let value = this.get("PhoneNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set PhoneNumber(value: string) {
    this.set("PhoneNumber", Value.fromString(value));
  }

  get Expertise(): string {
    let value = this.get("Expertise");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set Expertise(value: string) {
    this.set("Expertise", Value.fromString(value));
  }

  get ExpertFees(): BigInt {
    let value = this.get("ExpertFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ExpertFees(value: BigInt) {
    this.set("ExpertFees", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ClientRequested extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClientRequested entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ClientRequested must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ClientRequested", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ClientRequested | null {
    return changetype<ClientRequested | null>(
      store.get_in_block("ClientRequested", id.toHexString()),
    );
  }

  static load(id: Bytes): ClientRequested | null {
    return changetype<ClientRequested | null>(
      store.get("ClientRequested", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get ClientAddress(): Bytes {
    let value = this.get("ClientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set ClientAddress(value: Bytes) {
    this.set("ClientAddress", Value.fromBytes(value));
  }

  get ClientEmailAddress(): string {
    let value = this.get("ClientEmailAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ClientEmailAddress(value: string) {
    this.set("ClientEmailAddress", Value.fromString(value));
  }

  get ClientName(): string {
    let value = this.get("ClientName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ClientName(value: string) {
    this.set("ClientName", Value.fromString(value));
  }

  get phoneNumber(): string {
    let value = this.get("phoneNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set phoneNumber(value: string) {
    this.set("phoneNumber", Value.fromString(value));
  }

  get RequestIndex(): BigInt {
    let value = this.get("RequestIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set RequestIndex(value: BigInt) {
    this.set("RequestIndex", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ExpertRequested extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExpertRequested entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ExpertRequested must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ExpertRequested", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ExpertRequested | null {
    return changetype<ExpertRequested | null>(
      store.get_in_block("ExpertRequested", id.toHexString()),
    );
  }

  static load(id: Bytes): ExpertRequested | null {
    return changetype<ExpertRequested | null>(
      store.get("ExpertRequested", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get ExpertAddress(): Bytes {
    let value = this.get("ExpertAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set ExpertAddress(value: Bytes) {
    this.set("ExpertAddress", Value.fromBytes(value));
  }

  get RequestNumber(): BigInt {
    let value = this.get("RequestNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set RequestNumber(value: BigInt) {
    this.set("RequestNumber", Value.fromBigInt(value));
  }

  get ExpertName(): string {
    let value = this.get("ExpertName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ExpertName(value: string) {
    this.set("ExpertName", Value.fromString(value));
  }

  get ExpertemailAddress(): string {
    let value = this.get("ExpertemailAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ExpertemailAddress(value: string) {
    this.set("ExpertemailAddress", Value.fromString(value));
  }

  get phoneNumber(): string {
    let value = this.get("phoneNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set phoneNumber(value: string) {
    this.set("phoneNumber", Value.fromString(value));
  }

  get expertise(): string {
    let value = this.get("expertise");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set expertise(value: string) {
    this.set("expertise", Value.fromString(value));
  }

  get coursefees(): BigInt {
    let value = this.get("coursefees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set coursefees(value: BigInt) {
    this.set("coursefees", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
