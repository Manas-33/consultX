// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AddedClient extends ethereum.Event {
  get params(): AddedClient__Params {
    return new AddedClient__Params(this);
  }
}

export class AddedClient__Params {
  _event: AddedClient;

  constructor(event: AddedClient) {
    this._event = event;
  }

  get ClientAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ClientName(): string {
    return this._event.parameters[1].value.toString();
  }

  get ClientEmailId(): string {
    return this._event.parameters[2].value.toString();
  }

  get ClientPhoneNumber(): string {
    return this._event.parameters[3].value.toString();
  }

  get IntersestedConsulation(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class AddedExpert extends ethereum.Event {
  get params(): AddedExpert__Params {
    return new AddedExpert__Params(this);
  }
}

export class AddedExpert__Params {
  _event: AddedExpert;

  constructor(event: AddedExpert) {
    this._event = event;
  }

  get ExpertAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ExpertName(): string {
    return this._event.parameters[1].value.toString();
  }

  get EmailId(): string {
    return this._event.parameters[2].value.toString();
  }

  get PhoneNumber(): string {
    return this._event.parameters[3].value.toString();
  }

  get Expertise(): string {
    return this._event.parameters[4].value.toString();
  }

  get ExpertFees(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ClientRequested extends ethereum.Event {
  get params(): ClientRequested__Params {
    return new ClientRequested__Params(this);
  }
}

export class ClientRequested__Params {
  _event: ClientRequested;

  constructor(event: ClientRequested) {
    this._event = event;
  }

  get ClientAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ClientEmailAddress(): string {
    return this._event.parameters[1].value.toString();
  }

  get ClientName(): string {
    return this._event.parameters[2].value.toString();
  }

  get phoneNumber(): string {
    return this._event.parameters[3].value.toString();
  }

  get RequestIndex(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ExpertRequested extends ethereum.Event {
  get params(): ExpertRequested__Params {
    return new ExpertRequested__Params(this);
  }
}

export class ExpertRequested__Params {
  _event: ExpertRequested;

  constructor(event: ExpertRequested) {
    this._event = event;
  }

  get ExpertAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get RequestNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ExpertName(): string {
    return this._event.parameters[2].value.toString();
  }

  get ExpertemailAddress(): string {
    return this._event.parameters[3].value.toString();
  }

  get phoneNumber(): string {
    return this._event.parameters[4].value.toString();
  }

  get expertise(): string {
    return this._event.parameters[5].value.toString();
  }

  get coursefees(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ConsultVerse__AllClientRequestesResult {
  value0: Address;
  value1: Address;
  value2: boolean;
  value3: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: boolean,
    value3: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getWhoRequested(): Address {
    return this.value0;
  }

  getWhomRequestd(): Address {
    return this.value1;
  }

  getReqstatus(): boolean {
    return this.value2;
  }

  getReqIndex(): BigInt {
    return this.value3;
  }
}

export class ConsultVerse__AllRequestesResult {
  value0: Address;
  value1: boolean;
  value2: BigInt;

  constructor(value0: Address, value1: boolean, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getWhoRequested(): Address {
    return this.value0;
  }

  getRequestStatus(): boolean {
    return this.value1;
  }

  getReqIndex(): BigInt {
    return this.value2;
  }
}

export class ConsultVerse__OneAdminMapResult {
  value0: Address;
  value1: string;
  value2: string;

  constructor(value0: Address, value1: string, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }

  getWalletAddress(): Address {
    return this.value0;
  }

  getAdminName(): string {
    return this.value1;
  }

  getRole(): string {
    return this.value2;
  }
}

export class ConsultVerse__OneClientMapResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: string;
  value4: string;

  constructor(
    value0: Address,
    value1: string,
    value2: string,
    value3: string,
    value4: string,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    return map;
  }

  getClientAddress(): Address {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getEmailId(): string {
    return this.value2;
  }

  getPhoneNumber(): string {
    return this.value3;
  }

  getIntersestedConsulation(): string {
    return this.value4;
  }
}

export class ConsultVerse__OneExpertMapResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: string;
  value4: string;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: string,
    value2: string,
    value3: string,
    value4: string,
    value5: BigInt,
    value6: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getExpertAddress(): Address {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getEmailId(): string {
    return this.value2;
  }

  getPhoneNumber(): string {
    return this.value3;
  }

  getExpertise(): string {
    return this.value4;
  }

  getCourseFees(): BigInt {
    return this.value5;
  }

  getRating(): BigInt {
    return this.value6;
  }
}

export class ConsultVerse extends ethereum.SmartContract {
  static bind(address: Address): ConsultVerse {
    return new ConsultVerse("ConsultVerse", address);
  }

  AllClientRequestes(param0: Address): ConsultVerse__AllClientRequestesResult {
    let result = super.call(
      "AllClientRequestes",
      "AllClientRequestes(address):(address,address,bool,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new ConsultVerse__AllClientRequestesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBoolean(),
      result[3].toBigInt(),
    );
  }

  try_AllClientRequestes(
    param0: Address,
  ): ethereum.CallResult<ConsultVerse__AllClientRequestesResult> {
    let result = super.tryCall(
      "AllClientRequestes",
      "AllClientRequestes(address):(address,address,bool,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConsultVerse__AllClientRequestesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBoolean(),
        value[3].toBigInt(),
      ),
    );
  }

  AllRequestes(param0: Address): ConsultVerse__AllRequestesResult {
    let result = super.call(
      "AllRequestes",
      "AllRequestes(address):(address,bool,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new ConsultVerse__AllRequestesResult(
      result[0].toAddress(),
      result[1].toBoolean(),
      result[2].toBigInt(),
    );
  }

  try_AllRequestes(
    param0: Address,
  ): ethereum.CallResult<ConsultVerse__AllRequestesResult> {
    let result = super.tryCall(
      "AllRequestes",
      "AllRequestes(address):(address,bool,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConsultVerse__AllRequestesResult(
        value[0].toAddress(),
        value[1].toBoolean(),
        value[2].toBigInt(),
      ),
    );
  }

  NoOfClientRequests(): BigInt {
    let result = super.call(
      "NoOfClientRequests",
      "NoOfClientRequests():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_NoOfClientRequests(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "NoOfClientRequests",
      "NoOfClientRequests():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NoOfRequests(): BigInt {
    let result = super.call("NoOfRequests", "NoOfRequests():(uint256)", []);

    return result[0].toBigInt();
  }

  try_NoOfRequests(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("NoOfRequests", "NoOfRequests():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OneAdminMap(param0: Address): ConsultVerse__OneAdminMapResult {
    let result = super.call(
      "OneAdminMap",
      "OneAdminMap(address):(address,string,string)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new ConsultVerse__OneAdminMapResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
    );
  }

  try_OneAdminMap(
    param0: Address,
  ): ethereum.CallResult<ConsultVerse__OneAdminMapResult> {
    let result = super.tryCall(
      "OneAdminMap",
      "OneAdminMap(address):(address,string,string)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConsultVerse__OneAdminMapResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
      ),
    );
  }

  OneClientMap(param0: Address): ConsultVerse__OneClientMapResult {
    let result = super.call(
      "OneClientMap",
      "OneClientMap(address):(address,string,string,string,string)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new ConsultVerse__OneClientMapResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
    );
  }

  try_OneClientMap(
    param0: Address,
  ): ethereum.CallResult<ConsultVerse__OneClientMapResult> {
    let result = super.tryCall(
      "OneClientMap",
      "OneClientMap(address):(address,string,string,string,string)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConsultVerse__OneClientMapResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
      ),
    );
  }

  OneExpertMap(param0: Address): ConsultVerse__OneExpertMapResult {
    let result = super.call(
      "OneExpertMap",
      "OneExpertMap(address):(address,string,string,string,string,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new ConsultVerse__OneExpertMapResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
      result[5].toBigInt(),
      result[6].toBigInt(),
    );
  }

  try_OneExpertMap(
    param0: Address,
  ): ethereum.CallResult<ConsultVerse__OneExpertMapResult> {
    let result = super.tryCall(
      "OneExpertMap",
      "OneExpertMap(address):(address,string,string,string,string,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConsultVerse__OneExpertMapResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
        value[5].toBigInt(),
        value[6].toBigInt(),
      ),
    );
  }

  checkClientRequestStatus(): boolean {
    let result = super.call(
      "checkClientRequestStatus",
      "checkClientRequestStatus():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_checkClientRequestStatus(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkClientRequestStatus",
      "checkClientRequestStatus():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkRequestStatus(): boolean {
    let result = super.call(
      "checkRequestStatus",
      "checkRequestStatus():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_checkRequestStatus(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkRequestStatus",
      "checkRequestStatus():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getClientsOfExpert(_expertAddress: Address): Array<Address> {
    let result = super.call(
      "getClientsOfExpert",
      "getClientsOfExpert(address):(address[])",
      [ethereum.Value.fromAddress(_expertAddress)],
    );

    return result[0].toAddressArray();
  }

  try_getClientsOfExpert(
    _expertAddress: Address,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getClientsOfExpert",
      "getClientsOfExpert(address):(address[])",
      [ethereum.Value.fromAddress(_expertAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getExpertOfClients(_clientAddress: Address): Array<Address> {
    let result = super.call(
      "getExpertOfClients",
      "getExpertOfClients(address):(address[])",
      [ethereum.Value.fromAddress(_clientAddress)],
    );

    return result[0].toAddressArray();
  }

  try_getExpertOfClients(
    _clientAddress: Address,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getExpertOfClients",
      "getExpertOfClients(address):(address[])",
      [ethereum.Value.fromAddress(_clientAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptParticularClientRequestCall extends ethereum.Call {
  get inputs(): AcceptParticularClientRequestCall__Inputs {
    return new AcceptParticularClientRequestCall__Inputs(this);
  }

  get outputs(): AcceptParticularClientRequestCall__Outputs {
    return new AcceptParticularClientRequestCall__Outputs(this);
  }
}

export class AcceptParticularClientRequestCall__Inputs {
  _call: AcceptParticularClientRequestCall;

  constructor(call: AcceptParticularClientRequestCall) {
    this._call = call;
  }

  get _ClientAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptParticularClientRequestCall__Outputs {
  _call: AcceptParticularClientRequestCall;

  constructor(call: AcceptParticularClientRequestCall) {
    this._call = call;
  }
}

export class AcceptParticularExpertRequestCall extends ethereum.Call {
  get inputs(): AcceptParticularExpertRequestCall__Inputs {
    return new AcceptParticularExpertRequestCall__Inputs(this);
  }

  get outputs(): AcceptParticularExpertRequestCall__Outputs {
    return new AcceptParticularExpertRequestCall__Outputs(this);
  }
}

export class AcceptParticularExpertRequestCall__Inputs {
  _call: AcceptParticularExpertRequestCall;

  constructor(call: AcceptParticularExpertRequestCall) {
    this._call = call;
  }

  get _ExpertAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptParticularExpertRequestCall__Outputs {
  _call: AcceptParticularExpertRequestCall;

  constructor(call: AcceptParticularExpertRequestCall) {
    this._call = call;
  }
}

export class AddClientCall extends ethereum.Call {
  get inputs(): AddClientCall__Inputs {
    return new AddClientCall__Inputs(this);
  }

  get outputs(): AddClientCall__Outputs {
    return new AddClientCall__Outputs(this);
  }
}

export class AddClientCall__Inputs {
  _call: AddClientCall;

  constructor(call: AddClientCall) {
    this._call = call;
  }

  get _ClientName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _ClientEmailID(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _ClientPhone(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _InterestedConsulation(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class AddClientCall__Outputs {
  _call: AddClientCall;

  constructor(call: AddClientCall) {
    this._call = call;
  }
}

export class ApplytoParticularExpertCall extends ethereum.Call {
  get inputs(): ApplytoParticularExpertCall__Inputs {
    return new ApplytoParticularExpertCall__Inputs(this);
  }

  get outputs(): ApplytoParticularExpertCall__Outputs {
    return new ApplytoParticularExpertCall__Outputs(this);
  }
}

export class ApplytoParticularExpertCall__Inputs {
  _call: ApplytoParticularExpertCall;

  constructor(call: ApplytoParticularExpertCall) {
    this._call = call;
  }

  get _ExpertAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ClientAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ApplytoParticularExpertCall__Outputs {
  _call: ApplytoParticularExpertCall;

  constructor(call: ApplytoParticularExpertCall) {
    this._call = call;
  }
}

export class FillExpertProfileCall extends ethereum.Call {
  get inputs(): FillExpertProfileCall__Inputs {
    return new FillExpertProfileCall__Inputs(this);
  }

  get outputs(): FillExpertProfileCall__Outputs {
    return new FillExpertProfileCall__Outputs(this);
  }
}

export class FillExpertProfileCall__Inputs {
  _call: FillExpertProfileCall;

  constructor(call: FillExpertProfileCall) {
    this._call = call;
  }

  get _ExpertName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _EmailId(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _PhoneNumber(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _Expertise(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _ExpertFees(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class FillExpertProfileCall__Outputs {
  _call: FillExpertProfileCall;

  constructor(call: FillExpertProfileCall) {
    this._call = call;
  }
}

export class RequestAdminCall extends ethereum.Call {
  get inputs(): RequestAdminCall__Inputs {
    return new RequestAdminCall__Inputs(this);
  }

  get outputs(): RequestAdminCall__Outputs {
    return new RequestAdminCall__Outputs(this);
  }
}

export class RequestAdminCall__Inputs {
  _call: RequestAdminCall;

  constructor(call: RequestAdminCall) {
    this._call = call;
  }
}

export class RequestAdminCall__Outputs {
  _call: RequestAdminCall;

  constructor(call: RequestAdminCall) {
    this._call = call;
  }
}

export class SendAllDepoiststoClientCall extends ethereum.Call {
  get inputs(): SendAllDepoiststoClientCall__Inputs {
    return new SendAllDepoiststoClientCall__Inputs(this);
  }

  get outputs(): SendAllDepoiststoClientCall__Outputs {
    return new SendAllDepoiststoClientCall__Outputs(this);
  }
}

export class SendAllDepoiststoClientCall__Inputs {
  _call: SendAllDepoiststoClientCall;

  constructor(call: SendAllDepoiststoClientCall) {
    this._call = call;
  }

  get _ClientAddressToPay(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SendAllDepoiststoClientCall__Outputs {
  _call: SendAllDepoiststoClientCall;

  constructor(call: SendAllDepoiststoClientCall) {
    this._call = call;
  }
}

export class SendAllDepositsToExpertCall extends ethereum.Call {
  get inputs(): SendAllDepositsToExpertCall__Inputs {
    return new SendAllDepositsToExpertCall__Inputs(this);
  }

  get outputs(): SendAllDepositsToExpertCall__Outputs {
    return new SendAllDepositsToExpertCall__Outputs(this);
  }
}

export class SendAllDepositsToExpertCall__Inputs {
  _call: SendAllDepositsToExpertCall;

  constructor(call: SendAllDepositsToExpertCall) {
    this._call = call;
  }

  get _ExpertAddressToPay(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SendAllDepositsToExpertCall__Outputs {
  _call: SendAllDepositsToExpertCall;

  constructor(call: SendAllDepositsToExpertCall) {
    this._call = call;
  }
}

export class UpdateExpertRatingCall extends ethereum.Call {
  get inputs(): UpdateExpertRatingCall__Inputs {
    return new UpdateExpertRatingCall__Inputs(this);
  }

  get outputs(): UpdateExpertRatingCall__Outputs {
    return new UpdateExpertRatingCall__Outputs(this);
  }
}

export class UpdateExpertRatingCall__Inputs {
  _call: UpdateExpertRatingCall;

  constructor(call: UpdateExpertRatingCall) {
    this._call = call;
  }

  get _expertAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newRating(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateExpertRatingCall__Outputs {
  _call: UpdateExpertRatingCall;

  constructor(call: UpdateExpertRatingCall) {
    this._call = call;
  }
}
